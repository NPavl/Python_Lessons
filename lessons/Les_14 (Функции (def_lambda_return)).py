# 12 - Функции (def, lambda, return)
# В этом уроке мы с вами затронем тему функций в языке Python. Мы разберемся с ключевыми понятиями,
# такими как: def, lambda и return. Мы научимся создавать функции, вызывать их,
# а также рассмотрим многие важные моменты.
# Функции можно назвать небольшими подпрограммами, куда можно вынести повторяющийся код и
# обращаться к нему, когда это будет нужно. Функции значительно облегчают построение программ,
# так как нам не надо копировать однотипный код множество раз, а можно просто воспользоваться одной общей функцией.

# для того что бы прописать функцию напиать ключевое слово def, потом даем ей имя, далее ():
# в скобк мы можем пердавать параетры какие нам нужно или и абоать  ними в функции или ничего не передавать

def func (a):
    return a # возвращает значение a
print (func (23)) # передали параметром 23 и получили результат: 23



def func (a, b):
    return a + b # возвращает значение a + b
print (func (23, 45)) # передали 2 параметра 23 , 45 и получили результат : 68

def func (a, b):
    return a + b # возвращает значение a + b
print (func ('Hello\t', 'World')) # Hello	World,   можно передавать параером строки , результатом удет сложение



def func (a, b):
    res = a + b # добавим перменную res
    return res # возвращаем значение переменной res
print (func (' Hello\t', 'World')) # Hello	World



# НУЖНО ПРОЙТИСЬ ОТЛАДЧИКОМ . ТАК КАК АВТОР ПЛОХО ОБЬЯСНЯЕТ ПОСЛЕДОВАТЕЛЬНОСТЬ ОПЕРАЦИЙ
def func (a): # записываем одну и снизу еще одну функцию , в даную функцию параметром передаем 100 из функции test
    def add (b): # сюда мы передаем 200 из print (test (200)), обрабатывает следующую по очереди функцию
        return a + b # сложение 100 + 200
    return add # когда мы будем вызывать функцию func она будет возващать функцию add и соот-но функция add
                # будет возвращать сумму x + a
test = func (100) # данная функция test присваевает парамтром значение 100 в функцию func
print (test (200)) # 300 , так как мы применяем фунцию print нам еще и выводиться на экран 100+200
# данный пример демонсирует что у нас есть основна функция func в которой приоисходят какие то операции
# и в ней есть дополнительная функция как в примере add (доп подпрограмма)


def func (): # функии могут ничего не возващать как в данном примере (нет пааметров) мы просто пишем слово pass
    x = (45 / 2)
    y = (323 + 76)
    z = (56 ** 2)
    pass # выше пример что мы запиали как е то знаения и проивзели вычисления мы пишем pass нам ничего не нужно
         # возвращать
print (func ()) # None,   соот-но


def func (r, w, y = 2):
    res = r + w
    res *= y # у равен 2 (умножаем на параметр по умолчанию тобиш 2)
    return res

print (func (2, 4)) # 12 так как 2+4 = 6 (r+w) и res *2


# аналогичный пример толко доабвляем еще один параметр в функцию func 3 (он изменяет значение y который равен 2)
def func (r, w, y = 2):
    res = r + w
    res *= y  # у равен уже 3
    return res

print (func (2, 4, 3)) # 18 так как 2+4 = 6 (r+w) и res *3

# * Парамтры (значения) по рекомендации автора уровков лучше записывать в конце.



def func (*args ): # данный пример показвает нам что мы можем указаывать любое количество параметров через
                   # *args (args это просто название параметра, название может быть любым)
    return args
print (func ('resdfsd', 445.3, 3)) # несмотря на то что у нас 1 параметр args
                                   # при компиляции мы получили кортеж ('resdfsd', 445.3, 3)



def func (**args): # две ** это уже пример предачи параметров в виде словаря

    return args
print(func(a =34, b = 345.6, c = 90)) # запись в виде словаря у нас идет ключа и его значение
                                      # выводим в виде словаря {'a': 34, 'b': 345.6, 'c': 90}

print (func (short = 'dict', longer = 'dictionary' )) # выводим в виде словаря {'short': 'dict', 'longer': 'dictionary'}


# НУ И НА ПОСЛЕДОК ЛЯМБДА ФУНКЦИИ : в отличии от выше приведенных примеров -  лямда функция
# записывается в одну строчку  к примеру:

add = lambda x, y: x*y
print (add) # <function <lambda> at 0x0000018D54061EA0>
print (add (1, 5)) # что бы не выводить пустой адрес нам нужно передать туда
                   # параметры x и y (к примеру 1 и 5) получаем 6 (результат сложения 1+6)
print (add ('w', 5)) # wwwww



print ((lambda a, b: a * b) (2, 6) ) # 12 пример того что можно создать функцию создать лямбда
                                     # функцию и записать все в одной строке



# fun = (lambda *args: a * b) # * звезда кортеж
# fun = (lambda **args: a * b) # ** звезды словарь


fun = lambda *args: args # основное отличие в том что нет ключевого слова return
print (fun (2, 56, 34, 32)) # выводим кортеж (2, 56, 34, 32)

# или пример словаря

fun = lambda **args: args
print  (fun (a = 2, b = 56, c = 34, d = 32))

#________________________________________________________________________________





