# Табуляция строк  питоне:
#
# https://pythlife.blogspot.com.by/2012/09/blog-post_9556.html


# Строки в апострофах и в кавычках

S = 'spam"s'
print (S)
S = "spam's"
print (S)

# Строки в тройных апострофах или кавычках

c = '''это очень большая
... строка, многострочный
... блок текста'''
print(c)

c = 'это очень большая\nстрока, многострочный\nблок текста'
print(c)

# ======= специальные символы =======
# \newline # Продолжение на новой строке
# \\  # Остаётся один символ \
# \'  # Апостроф (Остаётся один символ ')
# \"  # Кавычки (Остаётся один символ ")
# \a  # Звонок
# \b  # Забой
# \f  # Перевод формата
# \n  # Новая строка
# \r  # Возврат каретки
# \t  # Горизонтальная табуляция
# \v  # Вертикальная табуляция
# \xhh  # Символ с шестнадцатеричным кодом hh
# \ooo  # Символ с восьмеричным кодом 000
# \0  # Символ Null
# \N{id}  # Id базы данных Юникода
# \uhhhh  # 16-битный символ Юникода
# \Uhhhhhhhh  # 32-битный символ Юникода

# !/usr/bin/env python
# -*- coding: utf-8 -*-

P = ''    # Пустая строка
P = "C'est une pomme" # Строка в кавычках
block = """.......""" # Блоки в тройных кавычках
P = r'\tmp\home' # Неформатированные строки
P = u'pomme' #  Строки с символами Юникода
P * 3 # Повторять строку (3 раза)
P [1] # Обратиться к символу (к 1-у)
P [:-1] # Текст без последнего символа
P [5:16] # Срез от 5 до 16 символа
P.find('Pa') # Поиск
P.rstrip() # Удаление пробельных символов
P.replace('Pa','xx') # Заменить (pa на xx)
P.split(',') # Разбитие по символу-разделителю
P.isdigit() # Проверка содержимого
P.lower() # Преобразование регистра символов
P.endswith('pomme') # Проверка окончания строки
P.encode('latin-1') # Кодирование строк Юникода


def primer_5():  # Объявление функции primer_5()
    a = 'Я программирую на языке Python \n'
    b = 'This is an apple'
    print(a * 5)
    print(b)
    print(b[5:10] + ' с 5 по 10 символ')


def main():
    primer_5()
    return 0

if __name__ == '__main__':
    main()



# !/usr/bin/env python
# -*- coding: utf-8 -*-  оператор + работает с текстом и означает сцепление строк.
def primer_3():  # Объявление функции primer_2()
    a = 'Я'
    b = ' программирую на языке'
    f = ' Python'
    print(a + b + f + ' :)')
    # сцепляем строковые переменные a,
    # b, f и 'текст' :)


def main():
    primer_3()
    return 0


if __name__ == '__main__':
    main()



    # !/usr/bin/env python
    # -*- coding: utf-8 -*-  данный оператор символизирует операцию повторения строки
    def primer_4():  # Объявление функции primer_4()
        a = 'Я'
        b = ' программирую на языке'
        f = ' Python \n'  # специальный символ \n
        # означает переход на следующую
        # строку
        g = a + b + f
        print(g * 3)
        # распечатывам значение
        # переменной g 3 раза


    def main():
        primer_4()
        return 0


    if __name__ == '__main__':
        main()