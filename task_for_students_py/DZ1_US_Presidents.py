# задание :  task_for_students_py Count presidents rule time
#  в процессе ......
#  создал новую ветку new_f работу буду вести из нее потом merging с основной:
#  коментрай в тойже строке для процедуры слияния через (kdif3) по идее бдолжен быт конфликт при слиянии
#  пробуем и смотрим что и как
# ____________________________________________________________________________________________________________

# функции работы со строками (полный список):
# https://pythonworld.ru/tipy-dannyx-v-python/stroki-funkcii-i-metody-strok.html

# str.isdigit()	"Состоит ли строка из цифр"
# Возвращает флаг, указывающий на то, содержит ли строка только цифры.  str. isdigit()  -> bool
# ____________________________________________________________________________________________________________
# Функция eval позволяет программе python запускать код python внутри себя. eval() интерпретирует строку как код.
# Пример eval (интерактивная оболочка):
# >>> x = 1
# >>> eval('x + 1')
#
# >>> eval('x')
#
# https://habrahabr.ru/post/221937/
# Python есть встроенная функция eval(), которая выполняет строку с кодом и возвращает результат выполнения:
# assert eval("2 + 3 * len('hello')") == 17

# ***** Это очень мощная, но в то же время и очень опасная инструкция, особенно если строки, которые вы передаёте в eval,
# получены не из доверенного источника. Что будет, если строкой, которую мы решим скормить eval'у,
# окажется os.system('rm -rf /')? Интерпретатор честно запустит процесс удаления всех данных с компьютера,
# и хорошо ещё, если он будет выполняться от имени наименее привилегированного пользователя
# в последующих примерах я буду использовать clear (cls, если вы используете Windows) вместо rm -rf /,
# чтобы никто из читателей случайно не выстрелил себе в ногу).
# Какие есть решения? : https://habrahabr.ru/post/221937/
#_______________________________________________________________________________________________________________
# что такое пасринг строки https://ru.stackoverflow.com/questions/603931/%D0%A0%D0%B0%D0%B7%D0%B1%D0%BE%D1%80-%D1%81%D1%82%D1%80%D0%BE%D0%BA%D0%B8-%D0%BD%D0%B0-%D1%87%D0%B0%D1%81%D1%82%D0%B8
# Парсим на Python: Pyparsing для новичков  https://habrahabr.ru/post/239081/
#